Emacs Configuration
Configration is inspired by hrs [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][configuration.org (GitHub)]] and by cestlaz [[https://cestlaz.github.io/posts/using-emacs-1-setup/][using emacs 1 setup]]

* Sensible defaults
Implement [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el (GitHub)]]

* MISC
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(global-linum-mode t)
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+END_SRC

* Configure packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
#+END_SRC
** Configure package mirrors
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

** Configure use-package
#+BEGIN_SRC emacs-lisp
;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
#+END_SRC
** try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
        :ensure t
        :bind (("C-x g" . magit-status)))
#+END_SRC
** org-brain
[[https://github.com/Kungsgeten/org-brain][org-brain]] implements a variant of concept mapping in Emacs, using
[[http://orgmode.org/][org-mode]]. Implementation is taken from [[https://github.com/Kungsgeten/org-brain][org-brain]]'s github.
#+BEGIN_SRC emacs-lisp
(use-package org-brain :ensure t
  :init
  (setq org-brain-path "~/Life/notes")
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (setq org-brain-visualize-default-choices 'all)
  (setq org-brain-title-max-length 30)
  (setq org-brain-visualize-one-child-per-line t))
#+END_SRC
** htmlize
This package converts the buffer text and the associated decorations
to HTML. [[https://github.com/hniksic/emacs-htmlize][github]]
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC
** material theme
#+BEGIN_SRC emacs-lisp
(use-package material-theme :ensure t)
#+END_SRC
** better defaults
[[https://melpa.org/#/better-defaults][melpa better-defaults]]

#+BEGIN_SRC emacs-lisp
(use-package better-defaults :ensure t)
#+END_SRC
** python
[[https://realpython.com/emacs-the-best-python-editor/][Emacs â€“ The Best Python Editor?]]
*** elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy 
  :ensure t
  :config
  (setq elpy-rpc-python-command "python3")    ;; For elpy
  (setq python-shell-interpreter "python3"))  ;; For interactive shell
 #+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC
*** autopep8
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :ensure t
  :config
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC
* org-mode
Configration ist based upon [[https://cestlaz-nikola.github.io/posts/using-emacs-2-org/][using emacs 2 org]]
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package anki-editor
  :ensure t
)
(load-file "~/code/anki-editor/anki-editor.el")

;;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;; '(package-selected-packages (quote (org-bullets which-key try use-package))))
 ;; (custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
;; )

#+END_SRC
