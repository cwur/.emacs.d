Emacs Configuration
Configration is inspired by hrs [[https://github.com/hrs/dotfiles/blob/master/emacs/.emacs.d/configuration.org][configuration.org (GitHub)]] and by cestlaz [[https://cestlaz.github.io/posts/using-emacs-1-setup/][using emacs 1 setup]]

* Sensible defaults
Implement [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el (GitHub)]]

* MISC
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
;;(global-linum-mode t)
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
(global-visual-line-mode t)
#+END_SRC

Set environment variable, so "pyvenv-workon" knows the path to the virtual environments.
#+BEGIN_SRC emacs-lisp
(setenv "WORKON_HOME" "~/code/environments/") 
#+END_SRC

Set variable for my main org-file. So it can be used through-out my configuration.
#+BEGIN_SRC emacs-lisp
(setq custom-variable-main-org-file "~/org/notes.org")
#+END_SRC

* Configure packages
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)
#+END_SRC
** Configure package mirrors
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

** Configure use-package
#+BEGIN_SRC emacs-lisp
;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
#+END_SRC
** try
#+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:ensure t 
	:config
	(which-key-mode))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
        :ensure t
        :bind (("C-x g" . magit-status)))
#+END_SRC
** htmlize
This package converts the buffer text and the associated decorations
to HTML. [[https://github.com/hniksic/emacs-htmlize][github]]
#+BEGIN_SRC emacs-lisp
(use-package htmlize :ensure t)
#+END_SRC
** material theme
#+BEGIN_SRC emacs-lisp
(use-package material-theme :ensure t)
#+END_SRC
** better defaults
[[https://melpa.org/#/better-defaults][melpa better-defaults]]

#+BEGIN_SRC emacs-lisp
(use-package better-defaults :ensure t)
#+END_SRC
** python
[[https://realpython.com/emacs-the-best-python-editor/][Emacs â€“ The Best Python Editor?]]
*** elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy 
  :ensure t
  :config
  (setq elpy-rpc-python-command "python3")    ;; For elpy
  (setq python-shell-interpreter "python3"))  ;; For interactive shell
 #+END_SRC
*** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :config
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
#+END_SRC
*** autopep8
#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :ensure t
  :config
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC
** auto-minor-mode
#+BEGIN_SRC emacs-lisp
(use-package auto-minor-mode
  :ensure t
  :config
  (add-to-list 'auto-minor-mode-alist '("\\.py\\'" . elpy-mode)))
  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
#+END_SRC
** pdf-tools [[https://github.com/politza/pdf-tools][github]]
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t) 
#+END_SRC
* org-mode
Configration ist based upon [[https://cestlaz-nikola.github.io/posts/using-emacs-2-org/][using emacs 2 org]]
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

(use-package anki-editor
  :ensure t
)
(load-file "~/code/anki-editor/anki-editor.el")

;;(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;; '(package-selected-packages (quote (org-bullets which-key try use-package))))
 ;; (custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
;; )
I want my main org-file to open on startup.
#+BEGIN_SRC emacs-lisp  
(find-file custom-variable-main-org-file)
#+END_SRC

#+END_SRC

Easy templates for emacs-lisp and python.
#+BEGIN_SRC emacs-lisp 
(add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp ? \n#+END_SRC"))
(add-to-list 'org-structure-template-alist '("py" "#+BEGIN_SRC python ? \n#+END_SRC"))
#+END_SRC

Using org-capture to prepare snippets.
#+BEGIN_SRC emacs-lisp 
(define-key global-map "\C-cc" 'org-capture)
(setq org-default-notes-file "~/Life/org/org.org")
(setq org-capture-templates
 '(("t" "Todo" entry (file+headline "~/Life/org/org.org" "INBOX")
        "* TODO %?\n  %i\n  %a")
   ("j" "Journal" entry (file+olp+datetree "~/Life/org/org.org" "Journal")
        "* %?\nEntered on %U\n  %i\n  %a")
   ("h" "How am I?" entry (file+olp+datetree "~/Life/org/org.org" "Journal")
        "* How am I?
*3 things I am grateful for..* \n
*What would make today great?* \n
*Daily affirmations. I am...* \n
*3 Amazing things that happended yesterday and why did they happened...* \n
*How could I have made yesterday, better?* \n
*When did I feel happy yesterday?* \n
*What can I do today to reach my longterm goals?* \n
*What else is on my mind?*
%?\nEntered on %U\n  %i")
   ("P" "grand Project" entry(file+headline custom-variable-main-org-file "INBOX")
        "* title :prj:
\** Scope
*What is this project about?*
*Why am I doing it?*
*What would success look like?*
*Just put some ideas out there*
\** Execution
*How am I accomplishing this project? What are the steps?*")
   ("p" "simple Project" entry(file+headline custom-variable-main-org-file "INBOX")
        "* title :prj:
*How am I accomplishing this project? What are the steps?*
\** todo")))
#+END_SRC

Configuring org-refie
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)
; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil) 
#+END_SRC

Org-agenda [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][An Agenda for Life With Org Mode]]
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Life/org/"))
(define-key global-map "\C-ca" 'org-agenda)
(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High priority unfinished tasks:")))
          (agenda "")
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if nil '(scheduled deadline))))))))))

(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
#+END_SRC

Follow link in org using RET.
#+BEGIN_SRC emacs-lisp
(setq org-return-follows-link t)
#+END_SRC
** org-babel
- stackoverflow: [[https://stackoverflow.com/questions/18598870/emacs-org-mode-executing-simple-python-code][Emacs Org Mode: Executing simple python code]]
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t))) 
#+END_SRC
** org-noter [[https://github.com/weirdNox/org-noter/blob/master/org-noter.el][github]]
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :ensure t
)
#+END_SRC
** org-brain
 [[https://github.com/Kungsgeten/org-brain][org-brain]] implements a variant of concept mapping in Emacs, using
 [[http://orgmode.org/][org-mode]]. Implementation is taken from [[https://github.com/Kungsgeten/org-brain][org-brain]]'s github.
 #+BEGIN_SRC emacs-lisp
 (use-package org-brain :ensure t
   :init
   (setq org-brain-path "~/Life/notes")
   :config
   (setq org-id-track-globally t)
   (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
   (setq org-brain-visualize-default-choices 'all)
   (setq org-brain-title-max-length 30)
   (setq org-brain-visualize-one-child-per-line t))
 #+END_SRC
